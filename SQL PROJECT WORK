---SQL DVD RENTAL DATA EXPLORATION

--QUERYING THE ACTORS TABLE TO CHECK THE CONTENT
SELECT * 
FROM actor;

--QUERYING THE ACTORS TABLE TO CHECK THE FIRST NAME AND LAST NAME
SELECT first_name,last_name
FROM actor;

--QUERYING THE ACTORS TABLE TO CHECK THE ACTOR ID
SELECT actor_id
FROM actor;

--WE WANT TO SEND A PROMOTIONAL EMAIL TO OUR EXISTING CUSTOMERS.WE WOULD NEED THEIR EMAIL,FIRST NAME AND LAST NAME.
SELECT email,first_name,last_name
From customer;

--WE WANT TO KNOW THE RELEASE YEAR OF VARIOUS FILMS IN OUR DATABASE
SELECT film_id,title,release_year
FROM film;

--WE WANT TO KNOW THE RENTAL RATES IN OUR DATA
SELECT rental_rate
FROM film;

--WE WANT TO KNOW THE DIFFERENT RENTAL RATES IN OUR DATA
SELECT DISTINCT rental_rate
FROM film;

--WE WANT TO KNOW THE TYPES OF RATINGS MOVIES CAN GET EG PG,PG-13,R ETC.
SELECT rating
FROM film;
WHERE rating = pg,pg-13,r

--WE WANT TO KNOW THE DIFFERENT RENTAL RATES IN OUR DATA
SELECT DISTINCT rental_rate
FROM film;

--WE WANT TO KNOW THE ALL CUSTOMERS WHOSE NAMES ARE Jamie IN OUR DATA
SELECT *
FROM customer
WHERE first_name = 'Jamie';

--WE WANT TO KNOW THE ALL CUSTOMERS WHOSE NAMES ARE Jamie IN OUR DATA
SELECT *
FROM customer
WHERE first_name = 'Jamie' OR last_name ='Jamie';

--WE WANT TO KNOW WHO PAID THE RENTAL RATES WHICH AMOUNT IS LESS THAN 1USD OR GREATER THAN 8USD IN OUR DATABASE
SELECT customer_id,amount,payment_date
FROM payment
WHERE amount <1 
OR amount > 8;

--HOW MANY PAYMENT TRANSACTIONS WERE GREATER THAN $5.00? 
SELECT COUNT(amount) 
FROM payment 
WHERE amount>5;

--HOW MANY ACTORS HAVE A FIRST NAME THAT STARTS WITH THE LETTER P? 
SELECT COUNT(*) 
FROM actor
WHERE first_name
LIKE 'P%';

--HOW MANY UNIQUE DISTRICTS ARE OUR CUSTOMERS FROM?
SELECT COUNT (DISTINCT(district)) 
FROM address;

--RETRIEVE THE LIST OF NAMES FOR THOSE DISTINCT DISTRICTS FROM THE PREVIOUS QUESTION. 
SELECT DISTINCT(district) 
FROM address;

--HOW MANY FILMS HAVE THE WORD TRUMAN SOMEWHERE IN THE TITLE? 
SELECT COUNT(*) 
FROM film 
WHERE title 
LIKE 'TRUMAN%';

--COUNT THE NUMBER OF TRANSACTIONS FROM THE PAYMENT TABLE
SELECT COUNT(*)
FROM payment;

--COUNT DIFFERENT NUMBER OF COUNTRIES IN THE COUNTRY TABLE
SELECT DISTINCT COUNT(country)
FROM country;

--CUSTOMERS ID NUMBERS FOR THE TOP 10 HEIGHEST AMOUNT
SELECT customer_id,amount
FROM payment
ORDER BY amount DESC
LIMIT 10

--GET THE TITLE OF MOVIES WITH FILM IDs 1-5
SELECT title,film _id
FROM film
ORDER BY film_id 
LIMIT 5

SELECT title,film _id
FROM film
WHERE film_id <=5;

--GET THE CUSTOMER ID AND RENTAL ID FOR PAYMENTS THAT ARE BETWEEN 8USD AND 9USD
SELECT customer_id,amount
FROM payment
WHERE amount 
BETWEEN 8 AND 8;

--SHOW THE PAYMENT THAT OCCURED BETWEEN FEBRUARY/1/2007 AND MARCH/1/2007
SELECT amount,payment_date,customer_id
FROM PAYMENT
WHERE payment_date
BETWEEN '2007/02/01' AND '2007/03/01';

--SHOW THE CUSTOMERS FIRST NAME THAT ENDS IN 'ER'
SELECT first_name,last_name
FROM customer
WHERE first_name LIKE '%er';

--SHOW THE CUSTOMERS FIRST NAME THAT SHOWS 'HER'AS SECOND ALPHABET
SELECT first_name,last_name
FROM customer
WHERE first_name LIKE '_her%';

--SHOW THE CUSTOMERS FIRST NAME THAT SHOWS 'HER'AS SECOND ALPHABET
SELECT first_name,last_name
FROM customer
WHERE first_name NOT LIKE 'Jen%';

--AGGREGATE FUNCTIONS
SELECT SUM (amount)
FROM payment;

SELECT AVG (amount)
FROM payment;

SELECT MAX (amount)
FROM payment;

SELECT MIN (amount)
FROM payment;

--SHOW THE TOTAL AMOUNT OUR CUSTOMERS HAS SPENT ON OUR BUSINESS
SELECT customer_id,SUM(amount)
FROM payment
GROUP BY customer_id
ORDER BY SUM (amount)DESC;

SELECT customer_id,SUM(amount) AS total_amount
FROM payment
GROUP BY customer_id;

--COPERATE HEADQAUTERS IS AUDITING OUR STORE. THEY WANT TO KNOW THE AVERAGE REPLACEMENT COST OF MOVIES BY RATING
SELECT AVG(replacement_cost),rating
FROM film
GROUP BY rating;

--COPERATE HEADQAUTERS WANTS TO REWARD OUR LOYAL CUSTOMERS. THEY WANT TO KNOW HOW MUCH HAS OUR CUSTOMERS WHO HAS SPENT ABOVE $200 SPENT EXACTLY
SELECT SUM(amount),customer_id
FROM payment
GROUP BY customer_id
HAVING SUM(amount)>200

--COPERATE HEADQAUTERS WANTS TO CLOSE THEIR NON PERFORMING SERVICING STORES. THEY WANT TO KNOW THE STORES THAT SERVICES OVER 300 CUSTOMERS
SELECT store_id,COUNT(customer_id)
FROM customer
GROUP BY store_id
HAVING COUNT(customer_id)>300;

--WE WANT TO KNOW THE AVERAGE RENTAL RATE OF THESE 3 RATINGS - R,PG AND G 
SELECT rating,AVG(rental_rate)
FROM film
WHERE rating IN('R','PG','G')
GROUP BY rating


SELECT rating,AVG(rental_rate)
FROM film
WHERE rating IN('R','PG','G')
GROUP BY rating
HAVING AVG(rental_rate)<3;

--WE WANT TO KNOW CUSTOMERS WHO ARE ELIGIBLE FOR OUR PLATINIUM CREDIT CARD. THE REQUIREMENTS ARE THAT THE CUSTOMERS HAS ATLEAST A TOTAL OF 40 TRANSACTIONS PAYMENTS. WHICH CUSTOMERS ARE ELIGIBLE FOR THE CREDICT CARD?
SELECT customer_id,COUNT(amount)
FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >=40;

SELECT customer_id,COUNT(amount) AS total_amount
FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >=40;

--LETSCOMBINE THE INVENTORY AND FILM TABLES. WE WANT TO SEE THE STORES AND THE TITLE OF THE MOVIES AVAILABLE TO THEM
SELECT store_id,title
FROM inventory
JOIN film 
ON inventory.film_id=film.film_id;

--LETS SEE THE FILM TABLE AND INVENTORY TABLE
SELECT film.film_id,film.title,inventory_id
FROM film
LEFT JOIN inventory ON inventory.film_id=film.film_id;

--CREATE A TABLE TO ORGANIZE OUR POTENTIAL LEADS! WE WILL HAVE THE FOLLOWING INFORMATION: A CUSTOMER'S FIRST NAME, LAST NAME, EMAIL, SIGN-UP DATE, AND NUMBER OF MINUTES SPENT        ON THE DVD RENTAL SITE. YOU SHOULD ALSO HAVE SOME SORT OF ID TRACKER FOR THEM. YOU HAVE FREE REIGN ON HOW YOU WANT TO CREATE THIS TABLE. 
CREATE TABLE Potential_leads(user_id serial PRIMARY KEY,
first_name varchar(40)NOT null,
last_name varchar (40)NOT null,
email varchar(150)UNIQUE NOT null,
minutes integer NOT null,
sign_up_date timestamp NOT null)


---MISCELLENEOUS

-- MISCELLANEOUS
-- CONNECT WITH ME ON LINKEDIN
-- Chidubem Tobias
-- https://www.linkedin.com/in/chidubem-tobias/

-- THANKS FOR looking in!!!
